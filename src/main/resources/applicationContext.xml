<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!--配置SpringIOC自动扫描的包
        Spring管理所有的业务逻辑组件。。。
    -->
    <context:component-scan base-package="org.mybatis">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--导入配置-->
    <context:property-placeholder location="classpath:dbconfig.properties"/>

    <!--使用Druid数据库连接池-->
   <!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>-->
    <!--Oracle-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${orcl.driver}"/>
        <property name="username" value="${orcl.username}"/>
        <property name="url" value="${orcl.url}"/>
        <property name="password" value="${orcl.password}"/>
    </bean>

    <!-- Spring事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--开启基于注解的事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--
        整合MyBatis
            目的：1，spring管理所有组件，mapper的实现类
                    service==>Dao  @Autowired ：自动注入mapper
                 2,spring用来管理事务，spring声明事务
        FactoryBean的使用
        MyBatis:org.mybatis.spring.SqlSessionFactoryBean
        MyBatisPlus:com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean
    -->
    <bean id="sqlSessionFactoryBean"
          class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--configLocation指定全局配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--mapperLocations：指定mapperxml文件的路径-->
        <!--<property name="mapperLocations" value="classpath:org/mybatisplus/mapper/*.xml"/>-->
        <!--别名处理-->
        <property name="typeAliasesPackage" value="org.mybatisplus.pojo"/>

        <!--注入com.baomidou.mybatisplus.core.config.GlobalConfig-->
        <property name="globalConfig" ref="globalConfig"/>

        <!--com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor-->
        <!--注册插件-->
        <property name="plugins">
            <array>
                <!--分页插件-->
                <bean class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor">
                    <!-- COUNT SQL 解析.可以没有 -->
                    <property name="countSqlParser" ref="countSqlParser"/>
                </bean>

                <!--判断是否是全表的删除更新操作
                    防止全表更新与删除
                    只建议在开发时使用
                -->
                <!--<bean class="com.baomidou.mybatisplus.extension.plugins.inner.BlockAttackInnerInterceptor">
                    &lt;!&ndash;配置是否停止操作 ....&ndash;&gt;
                    &lt;!&ndash;<property name="properties" value=""></property>&ndash;&gt;
                </bean>-->

                <!--乐观锁插件-->
                <bean class="com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor"></bean>

            </array>
        </property>
    </bean>
    <!--分页插件相关-->
    <bean id="countSqlParser" class="com.baomidou.mybatisplus.extension.plugins.pagination.optimize.JsqlParserCountOptimize">
        <!-- 设置为 true 可以优化部分 left join 的sql -->
        <property name="optimizeJoin" value="true"/>
    </bean>

    <!--定义MyBatisPlus的全局配置策略-->
    <bean id="globalConfig"
          class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <!--内部类为：DbConfig-->
        <property name="dbConfig">
            <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
                <!--是否使用下划线拼接，pojo的字段名，为数据库中字段-->
                <property name="tableUnderline" value="true"/>
                <!--全局的主键策略-->
                <property name="idType" value="AUTO"/>

                <!--<property name="idType" value="INPUT"/>--><!--Oracle专用INPUT-->
                <!--全局的表名策略-->
                <property name="tablePrefix" value="tb_"/>

                <!--逻辑删除字段值说明-->
                <property name="logicDeleteField" value="logicFlag"/><!--指明逻辑删除字段-->
                <property name="logicDeleteValue" value="-1"/>
                <property name="logicNotDeleteValue" value="1"/>

                <!--配置oracle的主键生成器-->
                <property name="keyGenerator" ref="oracleKeyGenerator"/>
            </bean>
        </property>
        <!--自定义注入,
            注入器-->
        <property name="sqlInjector" ref="mySqlInjector"/>

        <!--字段填充处理器-->
        <property name="metaObjectHandler" ref="myMetaObjectHandler"/>

    </bean>
    <!--自定义的sql注入类-->
    <bean id="mySqlInjector" class="org.mybatisplus.injector.MySqlInjector"></bean>

    <!--字段填充处理器-->
    <bean id="myMetaObjectHandler" class="org.mybatisplus.metaobjecthandler.MyMetaObjectHandler"></bean>

    <!--Oracle 序列处理器-->
    <bean id="oracleKeyGenerator" class="com.baomidou.mybatisplus.extension.incrementer.OracleKeyGenerator"></bean>



    <!--设置一个可以批量删除的sqlSession需要使用时直接使用@Autowrite注解注入-->
   <!-- <bean id="sqlSessionBatch"
          class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>-->



    <!--扫描所有的mapper接口的实现，让这些mapper能被自动注入-->
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <!--<mybatis-spring:scan base-package="org.mybatis.dao"/>-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.mybatisplus.dao"/>
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>-->
    </bean>

</beans>